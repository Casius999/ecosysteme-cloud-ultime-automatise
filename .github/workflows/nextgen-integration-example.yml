name: "NextGen Integration Example üîÑ"

# Ce workflow montre comment int√©grer l'architecture NextGen 
# √† un workflow GitHub Actions existant

on:
  # Garder les d√©clencheurs originaux
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Ajouter le d√©clencheur manuel avec des options
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de d√©ploiement'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod
      optimization_level:
        description: 'Niveau d'optimisation'
        required: false
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - aggressive

# Conserver les variables d'environnement existantes et ajouter les n√¥tres
env:
  # Variables existantes (exemple)
  NODE_VERSION: '16'
  # Variables NextGen
  NEXTGEN_ENABLED: 'true'
  OPTIMIZATION_LEVEL: ${{ github.event.inputs.optimization_level || 'standard' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}

# Permissions adapt√©es pour NextGen
permissions:
  contents: read
  pull-requests: write
  issues: read
  packages: write
  deployments: write
  id-token: write

jobs:
  # Phase 1: Orchestration NextGen - ajouter avant les jobs existants
  nextgen-orchestration:
    name: üîÑ NextGen Orchestration
    runs-on: ubuntu-latest
    # Condition pour activer/d√©sactiver facilement NextGen
    if: env.NEXTGEN_ENABLED == 'true'
    outputs:
      orchestration-id: ${{ steps.orchestrator.outputs.orchestration-id }}
      execution-plan: ${{ steps.orchestrator.outputs.execution-summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configure NextGen environment
        run: |
          echo "Setting up NextGen environment..."
          mkdir -p .github/workflow-config
          
          # Cr√©ation d'un fichier de configuration de base
          cat > .github/workflow-config.json << EOF
          {
            "name": "Integrated NextGen Workflow",
            "components": [
              {
                "id": "preparation",
                "name": "setup-environment",
                "parameters": {
                  "environment": "${{ env.ENVIRONMENT }}"
                },
                "dependencies": []
              },
              {
                "id": "security",
                "name": "security-validation",
                "parameters": {
                  "scan-depth": "standard"
                },
                "dependencies": ["preparation"]
              },
              {
                "id": "build",
                "name": "build-project",
                "parameters": {
                  "node-version": "${{ env.NODE_VERSION }}"
                },
                "dependencies": ["preparation"]
              },
              {
                "id": "test",
                "name": "test-project",
                "parameters": {
                  "with-coverage": true
                },
                "dependencies": ["build"]
              },
              {
                "id": "deploy",
                "name": "deploy-project",
                "parameters": {
                  "environment": "${{ env.ENVIRONMENT }}"
                },
                "dependencies": ["build", "test", "security"],
                "conditions": {
                  "environments": ["staging", "prod"],
                  "branches": ["main", "develop"]
                }
              }
            ],
            "optimization": {
              "level": "${{ env.OPTIMIZATION_LEVEL }}",
              "caching": true,
              "parallelize": true
            }
          }
          EOF
      
      - name: Workflow Orchestration
        id: orchestrator
        uses: ./.github/actions/core/workflow-orchestrator
        with:
          config-file: .github/workflow-config.json
          execution-strategy: adaptive
          max-parallelism: 16
          performance-metrics: true
          dynamic-scaling: true
      
      - name: Display orchestration results
        run: |
          echo "Orchestration ID: ${{ steps.orchestrator.outputs.orchestration-id }}"
          echo "Execution plan generated successfully"
  
  # Phase 2: S√©curit√© NextGen
  nextgen-security:
    name: üîí NextGen Security
    needs: nextgen-orchestration
    runs-on: ubuntu-latest
    if: env.NEXTGEN_ENABLED == 'true'
    outputs:
      security-score: ${{ steps.security.outputs.security-score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Security Analysis
        id: security
        uses: ./.github/actions/core/security-enforcer
        with:
          scan-depth: standard
          workflow-file: .github/workflows/nextgen-integration-example.yml
          repo-scan: true
          auto-remediate: true
      
      - name: Verify security score
        if: steps.security.outputs.security-score < 70
        run: |
          echo "::warning::Security score below threshold: ${{ steps.security.outputs.security-score }}/100"
          # N'√©chouez pas le build mais √©mettez un avertissement pour commencer
  
  # Phase 3: Int√©gration de la phase de pr√©paration existante avec NextGen
  prepare:
    name: üîß Prepare Environment
    # Conditionnellement d√©pendre de l'orchestration si NextGen est activ√©
    needs: ${{ env.NEXTGEN_ENABLED == 'true' && 'nextgen-security' || '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # √âtape traditionnelle existante
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Int√©gration NextGen - Optimization des d√©pendances
      - name: NextGen Dependency Optimization
        if: env.NEXTGEN_ENABLED == 'true'
        uses: ./.github/actions/core/dependency-optimizer
        with:
          dependency-file: package.json
          scan-level: standard
          auto-update: false  # Commencer prudemment sans mise √† jour auto
          security-check: true
      
      # Continuez avec le reste des √©tapes existantes
      - name: Install dependencies
        run: npm ci
      
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules/.cache
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
  
  # Phase 4: Int√©gration avec le build existant
  build:
    name: üèóÔ∏è Build
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # √âtape existante
      - name: Build
        run: npm run build
      
      # Ajout du monitoring NextGen
      - name: NextGen Build Monitoring
        if: env.NEXTGEN_ENABLED == 'true'
        uses: ./.github/actions/core/advanced-monitoring
        with:
          monitoring-level: standard
          workflow-id: ${{ github.run_id }}
          trace-dependencies: true
          collect-metrics: true
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: build/
          retention-days: 1
  
  # Phase 5: Int√©gration avec les tests existants
  test:
    name: üß™ Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: build/
      
      # √âtape existante
      - name: Run tests
        run: npm test
      
      # Ajout du monitoring NextGen
      - name: NextGen Test Monitoring
        if: env.NEXTGEN_ENABLED == 'true'
        uses: ./.github/actions/core/advanced-monitoring
        with:
          monitoring-level: standard
          workflow-id: ${{ github.run_id }}
          anomaly-detection: true
  
  # Phase 6: D√©ploiement conditionnel
  deploy:
    name: üöÄ Deploy
    # Conditions existantes enrichies avec NextGen
    if: |
      success() && 
      (github.ref == 'refs/heads/main' || github.event.inputs.environment != '') &&
      (env.NEXTGEN_ENABLED != 'true' || needs.nextgen-security.outputs.security-score >= 70)
    needs: [test, nextgen-security]
    runs-on: ubuntu-latest
    environment:
      name: ${{ env.ENVIRONMENT }}
      url: https://app.${{ env.ENVIRONMENT }}.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: build/
      
      # √âtape existante
      - name: Deploy
        run: |
          echo "Deploying to ${{ env.ENVIRONMENT }}..."
          # Commandes de d√©ploiement r√©elles ici
      
      # Ajout du monitoring NextGen
      - name: NextGen Deployment Monitoring
        if: env.NEXTGEN_ENABLED == 'true'
        uses: ./.github/actions/core/advanced-monitoring
        with:
          monitoring-level: complete
          workflow-id: ${{ github.run_id }}
          anomaly-detection: true
          predictive-analysis: true
  
  # Phase 7: Rapport final NextGen
  nextgen-report:
    name: üìä NextGen Report
    if: always() && env.NEXTGEN_ENABLED == 'true'
    needs: [nextgen-orchestration, nextgen-security, prepare, build, test, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Generate NextGen Report
        run: |
          echo "Generating NextGen workflow report..."
          
          # Cr√©ation d'un rapport Markdown
          mkdir -p reports
          
          cat > reports/nextgen-report.md << EOF
          # Rapport d'Int√©gration NextGen
          
          **Workflow**: ${{ github.workflow }}  
          **Ex√©cution**: ${{ github.run_id }}  
          **D√©clencheur**: ${{ github.event_name }}  
          **Branch/Tag**: ${{ github.ref_name }}
          
          ## Statuts
          
          | √âtape | Statut | M√©triques |
          |-------|--------|-----------|
          | Orchestration | ${{ needs.nextgen-orchestration.result }} | ID: ${{ needs.nextgen-orchestration.outputs.orchestration-id }} |
          | S√©curit√© | ${{ needs.nextgen-security.result }} | Score: ${{ needs.nextgen-security.outputs.security-score || 'N/A' }}/100 |
          | Pr√©paration | ${{ needs.prepare.result }} | - |
          | Build | ${{ needs.build.result }} | - |
          | Test | ${{ needs.test.result }} | - |
          | D√©ploiement | ${{ contains(needs.*.result, 'deploy') && needs.deploy.result || 'Non ex√©cut√©' }} | Env: ${{ env.ENVIRONMENT }} |
          
          ## Mode d'int√©gration
          
          L'int√©gration NextGen a √©t√© ex√©cut√©e en mode **${{ env.OPTIMIZATION_LEVEL }}**.
          
          ## Recommandations
          
          - Activation progressive des fonctionnalit√©s NextGen
          - Surveillance des m√©triques de performance
          - Optimisation continue des workflows
          EOF
      
      - name: Upload NextGen report
        uses: actions/upload-artifact@v3
        with:
          name: nextgen-integration-report
          path: reports/
          retention-days: 30
      
      - name: Summary
        run: |
          echo "## Int√©gration NextGen" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Mode d'optimisation**: ${{ env.OPTIMIZATION_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Score de s√©curit√©**: ${{ needs.nextgen-security.outputs.security-score || 'N/A' }}/100" >> $GITHUB_STEP_SUMMARY
          echo "**Orchestration ID**: ${{ needs.nextgen-orchestration.outputs.orchestration-id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "L'int√©gration NextGen a √©t√© ex√©cut√©e avec succ√®s. Le rapport complet est disponible dans les artefacts." >> $GITHUB_STEP_SUMMARY