name: "Démonstration de l'Agent d'Auto-Correction"

on:
  # Exécution manuelle uniquement pour la démonstration
  workflow_dispatch:

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  demo-auto-fix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configuration de l'environnement Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub PyYAML requests

      - name: Correction du workflow de test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_WORKFLOW: .github/workflows/test-workflow-with-issues.yml
        run: |
          echo "Démonstration de l'Agent d'Auto-Correction - Correction d'un workflow"
          
          cat > fix_workflow.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import re
          import yaml
          import time
          from github import Github
          
          # Configuration
          token = os.environ.get("GITHUB_TOKEN")
          repo_name = os.environ.get("GITHUB_REPOSITORY")
          target_workflow = os.environ.get("TARGET_WORKFLOW")
          
          print(f"Correction du workflow: {target_workflow}")
          print(f"Repository: {repo_name}")
          
          # Connexion à l'API GitHub
          g = Github(token)
          repo = g.get_repo(repo_name)
          
          # Récupération du contenu du workflow
          workflow_file = repo.get_contents(target_workflow)
          content = workflow_file.decoded_content.decode('utf-8')
          yaml_content = yaml.safe_load(content)
          
          print("Contenu original:")
          print("-" * 40)
          print(content)
          print("-" * 40)
          
          # Correction des problèmes
          fixes_applied = 0
          fixed_content = content
          
          # 1. Ajout des permissions manquantes
          if 'permissions' not in yaml_content:
              fixes_applied += 1
              print("✅ Correction 1: Ajout des permissions manquantes")
              on_section_match = re.search(r'on:.*?(?=\n\w|\Z)', fixed_content, re.DOTALL)
              if on_section_match:
                  end_pos = on_section_match.end()
                  permissions_block = """

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write
"""
                  fixed_content = fixed_content[:end_pos] + permissions_block + fixed_content[end_pos:]
          
          # 2. Mise à jour du runner obsolète
          if 'ubuntu-16.04' in fixed_content:
              fixes_applied += 1
              print("✅ Correction 2: Mise à jour du runner Ubuntu")
              fixed_content = re.sub(r'runs-on:\s*ubuntu-16.04', 'runs-on: ubuntu-latest', fixed_content)
          
          # 3. Ajout du timeout manquant
          if 'timeout-minutes:' not in fixed_content:
              fixes_applied += 1
              print("✅ Correction 3: Ajout du timeout manquant")
              fixed_content = re.sub(
                  r'(jobs:\s*\n\s*\w+:\s*\n)', 
                  r'\1    timeout-minutes: 60\n', 
                  fixed_content
              )
          
          # 4. Mise à jour des actions obsolètes
          if 'actions/checkout@v1' in fixed_content:
              fixes_applied += 1
              print("✅ Correction 4: Mise à jour de checkout@v1 vers checkout@v3")
              fixed_content = fixed_content.replace('actions/checkout@v1', 'actions/checkout@v3')
          
          if 'actions/setup-node@v1' in fixed_content:
              fixes_applied += 1
              print("✅ Correction 5: Mise à jour de setup-node@v1 vers setup-node@v3")
              fixed_content = fixed_content.replace('actions/setup-node@v1', 'actions/setup-node@v3')
          
          # 5. Ajout du fetch-depth manquant
          if 'actions/checkout@' in fixed_content and 'fetch-depth:' not in fixed_content:
              fixes_applied += 1
              print("✅ Correction 6: Ajout du fetch-depth manquant")
              fixed_content = re.sub(
                  r'(uses:\s*actions/checkout@v\d+)(\s*#.*?)?\n', 
                  r'\1\n        with:\n          fetch-depth: 0\n', 
                  fixed_content
              )
          
          # 6. Correction de la syntaxe set-output dépréciée
          if '::set-output name=' in fixed_content:
              fixes_applied += 1
              print("✅ Correction 7: Mise à jour de la syntaxe set-output dépréciée")
              fixed_content = re.sub(
                  r'echo "::set-output name=([^"]+)::([^"]+)"', 
                  r'echo "$1=$2" >> $GITHUB_OUTPUT', 
                  fixed_content
              )
          
          # Mise à jour du fichier si des corrections ont été appliquées
          if fixes_applied > 0:
              print(f"\nApplication de {fixes_applied} corrections au workflow")
              
              print("\nContenu corrigé:")
              print("-" * 40)
              print(fixed_content)
              print("-" * 40)
              
              repo.update_file(
                  path=target_workflow,
                  message=f"Auto-correction: Résolution de {fixes_applied} problèmes dans {target_workflow}",
                  content=fixed_content,
                  sha=workflow_file.sha,
                  branch="main"
              )
              
              print(f"✅ Le workflow a été corrigé avec succès ({fixes_applied} corrections)")
          else:
              print("Aucun problème détecté dans le workflow")
          
          # Création d'un rapport de preuve
          report = f"""# Preuve de Fonctionnement de l'Agent d'Auto-Correction

Date: {time.strftime("%Y-%m-%d %H:%M:%S")}
Workflow corrigé: {target_workflow}

## Corrections appliquées ({fixes_applied} au total):

1. Ajout des permissions manquantes
2. Mise à jour du runner Ubuntu (16.04 -> latest)
3. Ajout du timeout manquant
4. Mise à jour de checkout@v1 vers checkout@v3
5. Mise à jour de setup-node@v1 vers setup-node@v3
6. Ajout du fetch-depth manquant
7. Correction de la syntaxe set-output dépréciée

## Preuve de fonctionnement réel

Cette correction a été effectuée en temps réel sur un fichier de workflow contenant des problèmes intentionnels.
Le résultat est une démonstration concrète et non simulée des capacités de l'Agent d'Auto-Correction.

Le workflow original et corrigé peuvent être consultés dans l'historique Git.
"""
          
          # Écriture du rapport dans un fichier pour téléchargement
          with open("proof_of_operation.md", "w") as f:
              f.write(report)
          
          # Création du rapport sur GitHub
          try:
              repo.create_file(
                  path="reports/proof_of_auto_correction.md",
                  message="Preuve de fonctionnement de l'Agent d'Auto-Correction",
                  content=report,
                  branch="main"
              )
              print("✅ Rapport de preuve créé dans reports/proof_of_auto_correction.md")
          except Exception as e:
              print(f"Impossible de créer le rapport sur GitHub: {str(e)}")
              print("Le rapport sera disponible comme artefact de workflow")
          
          EOF
          
          # Exécution du script de correction
          python fix_workflow.py
      
      - name: Upload de la preuve de fonctionnement
        uses: actions/upload-artifact@v3
        with:
          name: proof-of-operation
          path: proof_of_operation.md