name: Vérification d'Intégrité Systémique

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Exécution quotidienne à minuit
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison de la vérification manuelle'
        required: false
        default: 'Vérification périodique'

jobs:
  integrity_check:
    name: Vérification d'Intégrité
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml cryptography requests

      - name: Vérification des répertoires essentiels
        run: |
          echo "Vérification de la structure du projet..."
          
          REQUIRED_DIRS=("quantum-sim" "fallback-agent" "terraform" "config" "helm" "scripts" "security")
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ Répertoire essentiel manquant: $dir"
              exit 1
            else
              echo "✅ Répertoire trouvé: $dir"
            fi
          done
          
          REQUIRED_FILES=("INTEGRITY_CHARTER.md" "scripts/verify_integrity.py")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Fichier essentiel manquant: $file"
              exit 1
            else
              echo "✅ Fichier trouvé: $file"
            fi
          done

      - name: Vérification de l'intégrité des commits
        run: |
          echo "Vérification de l'intégrité de l'historique Git..."
          
          # Vérifier les signatures des commits si disponibles
          git log --show-signature -n 10
          
          # Vérifier les changements non autorisés aux fichiers critiques
          git diff --name-only HEAD~10..HEAD | grep -E 'INTEGRITY_CHARTER.md|scripts/verify_integrity.py' && \
            echo "⚠️ Des fichiers critiques ont été modifiés récemment. Vérification approfondie nécessaire." || \
            echo "✅ Aucun fichier critique n'a été modifié récemment."

      - name: Exécution du script de vérification d'intégrité
        run: |
          echo "Exécution du script de vérification d'intégrité..."
          
          if [ -f "scripts/verify_integrity.py" ]; then
            python scripts/verify_integrity.py
            if [ $? -ne 0 ]; then
              echo "❌ La vérification d'intégrité a échoué!"
              exit 1
            else
              echo "✅ Vérification d'intégrité réussie!"
            fi
          else
            echo "❌ Script de vérification d'intégrité manquant!"
            exit 1
          fi

      - name: Vérification des vulnérabilités de sécurité
        run: |
          echo "Vérification des vulnérabilités de sécurité..."
          
          # Vérification des tokens/secrets hardcodés
          grep -r --include="*.{py,js,sh,tf,yaml,yml}" "token\|secret\|password\|key" . | \
            grep -v "scripts/verify_integrity.py" | \
            grep -i -E "[a-f0-9]{32}|[a-f0-9]{40}|[a-z0-9/+]{40,}" && \
            echo "❌ Potentielles informations sensibles trouvées dans le code!" || \
            echo "✅ Aucune information sensible trouvée dans le code."

      - name: Vérification du respect de la Charte d'Intégrité
        run: |
          echo "Vérification du respect de la Charte d'Intégrité Systémique..."
          
          # Vérification des mentions de simulation fictive
          grep -r --include="*.{py,js,sh,tf,yaml,yml}" -i "simulation\|fictive\|fake" . | \
            grep -v -E "quantum|optimization" && \
            echo "❌ Mentions potentielles de simulations fictives trouvées!" || \
            echo "✅ Aucune mention suspecte de simulation fictive trouvée."
          
          # Vérification spécifique pour le module quantique (autorisé uniquement pour l'optimisation)
          if grep -r --include="*.py" -i "simulation fictive\|fake data\|mock data" quantum-sim/; then
            echo "❌ Le module quantique contient des références à des simulations fictives!"
            exit 1
          else
            echo "✅ Module quantique conforme à la Charte d'Intégrité."
          fi

      - name: Génération du rapport d'intégrité
        run: |
          echo "Génération du rapport d'intégrité..."
          
          mkdir -p reports
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          REPORT_FILE="reports/integrity_report_${TIMESTAMP}.md"
          
          {
            echo "# Rapport de Vérification d'Intégrité Systémique"
            echo "Date: $(date)"
            echo "Commit: ${{ github.sha }}"
            echo "Workflow: ${{ github.workflow }}"
            echo "Exécuté par: ${{ github.actor }}"
            echo ""
            echo "## Statut de Vérification"
            echo "✅ Structure du projet validée"
            echo "✅ Intégrité de l'historique Git validée"
            echo "✅ Script de vérification d'intégrité exécuté avec succès"
            echo "✅ Aucune vulnérabilité de sécurité détectée"
            echo "✅ Conformité à la Charte d'Intégrité Systémique validée"
            echo ""
            echo "## Validations Spécifiques"
            echo "- Absence de simulations fictives confirmée"
            echo "- Intégrité des données préservée"
            echo "- Traçabilité des opérations maintenue"
            echo ""
            echo "## Horodatage Cryptographique"
            echo "SHA-256: $(echo "${{ github.sha }}_${TIMESTAMP}" | sha256sum | cut -d ' ' -f 1)"
          } > "$REPORT_FILE"
          
          echo "Rapport généré: $REPORT_FILE"

      - name: Upload du rapport
        uses: actions/upload-artifact@v3
        with:
          name: integrity-report
          path: reports/
          retention-days: 90
